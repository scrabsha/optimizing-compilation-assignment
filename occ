#! /bin/python3
#
# Author: Sasha Pourcelot <@scrabsha>
#
# Usage:
#  occ <file> <base args>
#
# Compiles <file> with gcc with <base args>, but compiles functions prefixed
# with //@ <args> comments separately with the arguments passed in the comments.
# The output is a single executable with all the functions linked together.
#
# The file must be a fully contained program, i.e. it must contain a main function.

def chunk_as_header(chunk: str) -> str:
    """
    Turn every C function with a body into a simple declaration.
    Keep every preprocessing directive (#include, #define, etc.) as is.

    We could use ctags for this. The third column contains the data we need.
    """
    # Run ctags
    import subprocess
    import tempfile
    import os

    with tempfile.TemporaryDirectory() as tmpdirname:
        tmpfile = os.path.join(tmpdirname, "tmp.c")
        with open(tmpfile, "w") as f:
            f.write(chunk)

        p = subprocess.run(
            ["ctags", "-x", tmpfile], capture_output=True)
        if p.returncode != 0:
            print("ctags failed")
            exit(1)

        # Parse the output
        lines = p.stdout.decode().splitlines()

        output_lines = []

        for line in lines:
            # Split columns
            columns = line.split()

            symbol_kind = columns[1]
            symbol_data = line[56:]

            if symbol_kind == "function":
                # Remove the trailing { if it exists, append a ; at the end
                symbol_data = symbol_data.rstrip("{") + ";"
            elif symbol_kind == "macro":
                pass
                # Nothing to do
            elif symbol_kind == "variable":
                # Add an extern keyword at the beginning, add a ; at the end
                # if it doesn't exist
                symbol_data = "extern " + symbol_data
                if not symbol_data.endswith(";"):
                    symbol_data += ";"
            else:
                print("Unknown symbol kind: ", symbol_kind)
                # Unknown symbol kind
                continue

            output_lines.append(symbol_data)

        return "\n".join(output_lines)


def split_input_in_chunks(input: str, base_args: list[str]) -> list[tuple[str, list[str]]]:
    chunks = []
    current_chunk = []
    base_args = base_args.copy()
    current_args = base_args.copy()
    include_list = []
    for line in input.splitlines():
        if line.startswith("#include"):
            include_list.append(line)

        if line.startswith("//@"):
            chunks.append(("\n".join(current_chunk), current_args))
            current_chunk = include_list.copy()
            current_args = (line[3:].split())
            if len(current_args) == 0:
                current_args = base_args.copy()

        else:
            current_chunk.append(line)

    chunks.append(("\n".join(current_chunk), current_args))

    return chunks


def compile_chunk(code: str, id: int, path_prefix: str, args: list[str], header: str) -> str:
    """Returns the path to the artefact"""
    import tempfile
    import subprocess
    import os

    out_file = os.path.join(path_prefix, str(id) + ".o")

    args = args.copy()

    args.extend(["-c", "-o", out_file])

    tmpfile = os.path.join(path_prefix, "tmp.c")
    with open(tmpfile, "w") as f:
        f.write(header)
        f.write("\n")
        f.write(code)

    # The same, except that we check for the exit code
    p = subprocess.run(["gcc", tmpfile] + args)
    if p.returncode != 0:
        print("Compilation failed")
        exit(1)

    return out_file


def link_chunks(path_prefix: str, chunk_objects: list[str]) -> str:
    import tempfile
    import subprocess
    import os

    output = os.path.join(path_prefix, "tmp.out")
    p = subprocess.run(["gcc", "-o", output] + chunk_objects)
    if p.returncode != 0:
        print("Linking failed")
        exit(1)

    return output


def handle_base_args(args: list[str]) -> list[str]:
    """
    Apply the following transformations:
    - Remove the -c argument and the argument that immediately follows it
    - Remove the -o argument and the argument that immediately follows it
    """
    args = args.copy()
    i = 0
    while i < len(args):
        if args[i] == "-c":
            args.pop(i)
            args.pop(i)
        elif args[i] == "-o":
            args.pop(i)
            args.pop(i)
        else:
            i += 1

    return args


def output_artefact(args: list[str]) -> str:
    # Return the element after -o
    i = 0
    while i < len(args):
        if args[i] == "-o":
            return args[i+1]
        i += 1
    return None


def main():
    import sys
    import tempfile
    import shutil

    if len(sys.argv) < 3:
        print("Usage: occ <file> <base args>")
        exit(1)

    with open(sys.argv[1], "r") as f:
        input = f.read()

    base_args = handle_base_args(sys.argv[2:])
    chunks = split_input_in_chunks(input, base_args)

    header = ""

    with tempfile.TemporaryDirectory() as tmpdirname:
        chunk_objects = []

        # But we want to use for loop
        for idx, (code, args) in enumerate(chunks):
            object = compile_chunk(code, idx, tmpdirname, args, header)
            chunk_objects.append(object)
            header += "\n" + chunk_as_header(code)

        tmp_output_artefact = link_chunks(tmpdirname, chunk_objects)

        out_path = output_artefact(sys.argv[2:])
        shutil.copy(tmp_output_artefact, out_path)


if __name__ == "__main__":
    main()
